desc:JSModulator
tags: synth, instrument

slider1:_vol=100<0, 100, 0.1>-Master Volume
slider2:_vel=100<0, 100, 0.1>-Velocity
slider3:_att=1<1, 5000, 1:log>-Attack
slider4:_dec=1<1, 5000, 1:log>-Decay
slider5:_sus=100<0, 100, 0.1>-Sustain
slider6:_rel=500<0, 5000, 1:log>-Release
slider7:_att_t=0<-100,100,1>Attack curve
slider8:_dec_t=0<-100,100,1>Decay curve
slider9:_rel_t=0<-100,100,1>Release curve

slider20:_o1_vol=80<0,100,1>-Osc1 Vol
slider21:_o1_pan=0<-100,100,0.01>-Osc1 Pan

slider40:_o2_vol=0<0,100,1>-Osc2 Vol
slider41:_o2_pan=0<-100,100,0.01>-Osc2 Pan

slider60:_o3_vol=0<0,100,1>-Osc3 Vol
slider61:_o3_pan=0<-100,100,0.01>-Osc3 Pan

slider80:_o4_vol=0<0,100,1>-Osc4 Vol
slider81:_o4_pan=0<-100,100,0.01>-Osc4 Pan

slider240:_fm11=0<0,100,.1>-Fm11
slider241:_fm12=0<0,100,.1>-Fm12
slider242:_fm13=0<0,100,.1>-Fm13
slider243:_fm14=0<0,100,.1>-Fm14

slider244:_fm21=0<0,100,.1>-Fm21
slider245:_fm22=0<0,100,.1>-Fm22
slider246:_fm23=0<0,100,.1>-Fm23
slider247:_fm24=0<0,100,.1>-Fm24

slider248:_fm31=0<0,100,.1>-Fm31
slider249:_fm32=0<0,100,.1>-Fm32
slider250:_fm33=0<0,100,.1>-Fm33
slider251:_fm34=0<0,100,.1>-Fm34

slider252:_fm41=0<0,100,.1>-Fm41
slider253:_fm42=0<0,100,.1>-Fm42
slider254:_fm43=0<0,100,.1>-Fm43
slider255:_fm44=0<0,100,.1>-Fm44

import mod.array.jsfx-inc
import mod.fft_real_synth.jsfx-inc
import mod.osc.jsfx-inc
import mod.wavetable.jsfx-inc
import mod.envlib.jsfx-inc
import mod.mouselib.jsfx-inc
import mod.gfxlib.jsfx-inc

@init

poly.array_init(1000, 127, 10); // [note, freq, ph1, ph2, ph3, ph4, signal1, signal2, signal3, signal4]
remove_notes.array_init(5000, 127, 1); // remove notes array
envelope = 10000; // 18 * 127 - master envelope per key

gfx_panel = 0; // 0 - Global, 1 - Op1, 2 - Op2 .... 5 - Filter

function db2gain (db) local (val) (
  val = 10^(db / 20); 
  val <= 0.001 ? 0 : val;
);
function round(in) (floor(in + 0.5 * sign(in)););
function note2freq(n) (440 * pow(2, (n - 69) / 12););
function freq2note(f) ( round(12*(log(f/440)/log(2))+69); );
// convert [0,100] scale to exponential [0,4]
function normalizeFMSlider(val) ( 4 * (val/100) ^ 2; );
function normalizeVolSlider(val) ( val * 60 / 100 - 60 );

osc1.buf = 100000;
osc1.open_file("tilr_JSOperative/Sine 1.wav", four1);
osc1.wave_init(osc1.buf, osc1.len);

osc2.buf = 200000;
osc2.open_file("tilr_JSOperative/Sine 1.wav", four2);
osc2.wave_init(osc2.buf, osc2.len);

osc3.buf = 300000;
osc3.open_file("tilr_JSOperative/Sine 1.wav", four3);
osc3.wave_init(osc3.buf, osc3.len);

osc4.buf = 400000;
osc4.open_file("tilr_JSOperative/Sine 1.wav", four4);
osc4.wave_init(osc4.buf, osc4.len);


function on_slider() (
  fm11 = normalizeFMSlider(_fm11);
  fm12 = normalizeFMSlider(_fm12);
  fm13 = normalizeFMSlider(_fm13);
  fm14 = normalizeFMSlider(_fm14);

  fm21 = normalizeFMSlider(_fm21);
  fm22 = normalizeFMSlider(_fm22);
  fm23 = normalizeFMSlider(_fm23);
  fm24 = normalizeFMSlider(_fm24);

  fm31 = normalizeFMSlider(_fm31);
  fm32 = normalizeFMSlider(_fm32);
  fm33 = normalizeFMSlider(_fm33);
  fm34 = normalizeFMSlider(_fm34);

  fm41 = normalizeFMSlider(_fm41);
  fm42 = normalizeFMSlider(_fm42);
  fm43 = normalizeFMSlider(_fm43);
  fm44 = normalizeFMSlider(_fm44);
  
  gain = db2gain(normalizeVolSlider(_vol));
  sus = normalizeVolSlider(_sus);
);

@slider

on_slider();

@block

while (midirecv(offset, msg1, note, vel)) (
  event = msg1 & 0xF0;

  // Note on
  event == 0x90 && vel ? (
    // remove note if it is already playing
    note_repeat = 0;
    ptr = poly.array_find(note);
    ptr >= 0 ? (
      note_repeat = 1;
      last_phase_1 = ptr[2];
      last_phase_2 = ptr[3];
      last_phase_3 = ptr[4];
      last_phase_4 = ptr[5];
      poly.array_remove(ptr);
    );

    ptr = poly.array_add();
    ptr[0] = note;
    ptr[1] = note2freq(note) / srate;
    ptr[2] = note_repeat ? last_phase_1 : 0;
    ptr[3] = note_repeat ? last_phase_2 : 0;
    ptr[4] = note_repeat ? last_phase_3 : 0;
    ptr[5] = note_repeat ? last_phase_4 : 0;

    env = envelope + note * 18;
    env_adsr(env, _att, _dec, sus, _rel, _att_t / 100, _dec_t / 100, _rel_t / 100);
    env_a(env, min(vel / 127 + (1 - _vel / 100), 1););
  );

  // Note off
  event == 0x80 || (event == 0x90 && !vel) ? (
    ptr = poly.array_find(note);
    ptr >= 0 ? (
      env_r(envelope + note * 18);
    );
  );

  // All notes off
  event == 0xB0 && note == 123 ? (
    poly.array_clear();
  );

  midisend(offset, msg1, note, vel);
);

@sample

remove_notes.array_clear();
ptr = poly.array_first();
while(ptr >= 0) ( // for each note/voice
  envbuf = envelope + ptr[0] * 18;
  env_state = env_process(envbuf);

  freq = ptr[1];
  ph1 = ptr[2];
  ph2 = ptr[3];
  ph3 = ptr[4];
  ph4 = ptr[5];
  s1 = ptr[6];
  s2 = ptr[7];
  s3 = ptr[8];
  s4 = ptr[9];

  osc1.wave_sync(ph1 + s1 * fm11 + s2 * fm21 + s3 * fm31 + s4 * fm41);
  osc1.wave_setdt(freq);
  s1 = osc1.wave_spline3();
  ph1 += osc1.dt;
  ph1 > 1 ? ph1 -= 1;

  osc2.wave_sync(ph2 + s1 * fm12 + s2 * fm22 + s3 * fm32 + s4 * fm42);
  osc2.wave_setdt(freq);
  s2 = osc2.wave_spline3();
  ph2 += osc2.dt;
  ph2 > 1 ? ph2 -= 1;

  osc3.wave_sync(ph3 + s1 * fm13 + s2 * fm23 + s3 * fm33 + s4 * fm43);
  osc3.wave_setdt(freq);
  s3 = osc3.wave_spline3();
  ph3 += osc3.dt;
  ph3 > 1 ? ph3 -= 1;

  osc4.wave_sync(ph4 + s1 * fm14 + s2 * fm24 + s3 * fm34 + s4 * fm44);
  osc4.wave_setdt(freq);
  s4 = osc4.wave_spline3();
  ph4 += osc4.dt;
  ph4 > 1 ? ph4 -= 1;

  ptr[2] = ph1;
  ptr[3] = ph2;
  ptr[4] = ph3;
  ptr[5] = ph4;
  ptr[6] = s1;
  ptr[7] = s2;
  ptr[8] = s3;
  ptr[9] = s4;

  spl0 += s1 * gain * envbuf[];
  spl1 += s1 * gain * envbuf[];

  // mark note for deletion
  env_state == 0 ? (
    p = remove_notes.array_add();
    p[0] = ptr[0];
  );

  ptr = poly.array_next(ptr);
);

// remove notes that finished adsr
ptr = remove_notes.array_first();
while(ptr >= 0) (
  p = poly.array_find(ptr[0]);
  p >= 0 ? poly.array_remove(p);
  ptr = remove_notes.array_next(ptr);
);

@gfx 760 250

gfx_clear = COLOR_BG;
mouse.update_mouse_state();

draw_matrix(440, 30, 300, 200);

draw_button(20, 20, 50, "Glb", gfx_panel == 0);
draw_button(70, 20, 50, "OP 1", gfx_panel == 1);
draw_button(120, 20, 50, "OP 2", gfx_panel == 2);
draw_button(170, 20, 50, "OP 3", gfx_panel == 3);
draw_button(220, 20, 50, "OP 4", gfx_panel == 4);
draw_button(270, 20, 50, "Flt", gfx_panel == 5);

mouse.left_click && mouse_in_rect(20,20-2,50,10+4) ? gfx_panel = 0;
mouse.left_click && mouse_in_rect(70,20-2,50,10+4) ? gfx_panel = 1;
mouse.left_click && mouse_in_rect(120,20-2,50,10+4) ? gfx_panel = 2;
mouse.left_click && mouse_in_rect(170,20-2,50,10+4) ? gfx_panel = 3;
mouse.left_click && mouse_in_rect(220,20-2,50,10+4) ? gfx_panel = 4;
mouse.left_click && mouse_in_rect(270,20-2,50,10+4) ? gfx_panel = 5;

// GLOBAL
gfx_panel == 0 ? (
  draw_knob(20,50, 1, "Vol", 100, 0, 100, 0, 0, sprintf(#, "%d", slider(1)), 0); 
  draw_knob(20,150, 2, "Vel", 100, 0, 100, 0, 0, sprintf(#, "%d", slider(2)), 0); 
  draw_knob(80,150, 3, "Att", 1, 1, 5000, 1, 0, sprintf(#, "%d", slider(3)), 0); 
  draw_knob(140,150, 4, "Dec", 1, 1, 5000, 1, 0, sprintf(#, "%d", slider(4)), 0); 
  draw_knob(200,150, 5, "Sus", 100, 0, 100, 0, 0, sprintf(#, "%d", slider(5)), 0); 
  draw_knob(260,150, 6, "Rel", 1, 1, 5000, 1, 0, sprintf(#, "%d", slider(6)), 0); 
  set_color(0x666666);
  gfx_x = 20; gfx_y = 130;
  gfx_drawstr("ENVELOPE");
  gfx_x = 320;
  gfx_drawstr("CURVE");
  gfx_x = 320; gfx_y = 155;
  gfx_drawstr("Att");
  gfx_x = 320; gfx_y = 175;
  gfx_drawstr("Dec");
  gfx_x = 320; gfx_y = 195;
  gfx_drawstr("Rel");
  draw_number(350, 155, 40, 10, 7, 0, -100, 100);
  draw_number(350, 175, 40, 10, 8, 0, -100, 100);
  draw_number(350, 195, 40, 10, 9, 0, -100, 100);
);

function on_knob_move (nslider, slider_min, slider_max, slider_is_log, factor) (
  factor *= mouse.control ? 0.05 : 1;
  slider_is_log ? (
    slider(nslider) = slider(nslider) * pow(100, -factor * 0.01);
  ) : (
    inc = (slider_max - slider_min) / 100 * -factor;
    slider(nslider) += inc;
  );

  slider(nslider) > slider_max ? slider(nslider) = slider_max;
  slider(nslider) < slider_min ? slider(nslider) = slider_min;
  on_slider();
  sliderchange(slider(nslider));
  slider_automate(slider(nslider));
);

wheelknob_nslider ? (
  on_knob_move(wheelknob_nslider, wheelknob_min, wheelknob_max, wheelknob_is_log, mouse.wheel * -7);
);

selknob_nslider && mouse.left && mouse.dy != 0 ? (
  on_knob_move(selknob_nslider, selknob_min, selknob_max, selknob_is_log, mouse.dy);
);

doubleclk_nslider ? (
  on_slider();
  sliderchange(slider(doubleclk_nslider));
  slider_automate(slider(doubleclk_nslider));
  doubleclk_nslider = 0;
);

gfx_setcursor(selknob_nslider ? 32511 : 0);
!mouse.wheel ? wheelknob_nslider = 0;
!mouse.left ? selknob_nslider = 0;
