desc:JSOperative

slider1:_fm11=0<0,100,.1>Fm11
slider2:_fm12=0<0,100,.1>Fm12
slider3:_fm13=0<0,100,.1>Fm13
slider4:_fm14=0<0,100,.1>Fm14

slider6:_fm21=0<0,100,.1>Fm21
slider7:_fm22=0<0,100,.1>Fm22
slider8:_fm23=0<0,100,.1>Fm23
slider9:_fm24=0<0,100,.1>Fm24

slider11:_fm31=0<0,100,.1>Fm31
slider12:_fm32=0<0,100,.1>Fm32
slider13:_fm33=0<0,100,.1>Fm33
slider14:_fm34=0<0,100,.1>Fm34

slider16:_fm41=0<0,100,.1>Fm41
slider17:_fm42=0<0,100,.1>Fm42
slider18:_fm43=0<0,100,.1>Fm43
slider19:_fm44=0<0,100,.1>Fm44

import op.array.jsfx-inc
import op.fft_real_synth.jsfx-inc
import op.osc.jsfx-inc
import op.wavetable.jsfx-inc
import op.envlib.jsfx-inc

@init

poly.array_init(1000, 127, 10); // [note, freq, ph1, ph2, ph3, ph4, signal1, signal2, signal3, signal4]
remove_notes.array_init(5000, 127, 1); // remove notes array
envelope = 10000; // 18 * 127 - master envelope per key

function round(in) (floor(in + 0.5 * sign(in)););
function note2freq(n) (440 * pow(2, (n - 69) / 12););
function freq2note(f) ( round(12*(log(f/440)/log(2))+69); );

osc1.buf = 100000;
osc1.open_file("tilr_JSOperative/Sine 1.wav", four1);
osc1.wave_init(osc1.buf, osc1.len);

osc2.buf = 200000;
osc2.open_file("tilr_JSOperative/Sine 1.wav", four2);
osc2.wave_init(osc2.buf, osc2.len);

osc3.buf = 300000;
osc3.open_file("tilr_JSOperative/Sine 1.wav", four3);
osc3.wave_init(osc3.buf, osc3.len);

osc4.buf = 400000;
osc4.open_file("tilr_JSOperative/Sine 1.wav", four4);
osc4.wave_init(osc4.buf, osc4.len);

@slider

// convert [0,100] scale to exponential [0,4]
function normalizeFMSlider(val) (
  4 * (val/100) ^ 2;
);

fm11 = normalizeFMSlider(_fm11);
fm12 = normalizeFMSlider(_fm12);
fm13 = normalizeFMSlider(_fm13);
fm14 = normalizeFMSlider(_fm14);

fm21 = normalizeFMSlider(_fm21);
fm22 = normalizeFMSlider(_fm22);
fm23 = normalizeFMSlider(_fm23);
fm24 = normalizeFMSlider(_fm24);

fm31 = normalizeFMSlider(_fm31);
fm32 = normalizeFMSlider(_fm32);
fm33 = normalizeFMSlider(_fm33);
fm34 = normalizeFMSlider(_fm34);

fm41 = normalizeFMSlider(_fm41);
fm42 = normalizeFMSlider(_fm42);
fm43 = normalizeFMSlider(_fm43);
fm44 = normalizeFMSlider(_fm44);

@block

while (midirecv(offset, msg1, note, vel)) (
  event = msg1 & 0xF0;

  // Note on
  event == 0x90 && vel ? (
    // remove note if it is already playing
    note_repeat = 0;
    ptr = poly.array_find(note);
    ptr >= 0 ? (
      note_repeat = 1;
      //last_phase_1l = ptr[3];
      poly.array_remove(ptr);
    );

    // if polyphony is full and not mono remove first element
    poly.size == 16 && 16 != 0 ? (
      poly.array_remove(poly.array_first());
    );

    ptr = poly.array_add();
    ptr[0] = note;
    ptr[1] = note2freq(note) / srate;
    ptr[2] = 0;
    ptr[3] = 0;
    ptr[4] = 0;
    ptr[5] = 0;
    ptr[6] = 0;
    ptr[7] = 0;
    ptr[8] = 0;
    ptr[9] = 0;

    env = envelope + note * 18;
    memset(env, 0, 18); // attempt to fix clicks
    
    env_adsr(env, 1, 1, 0, 500, 0, 0, 0);
    env_a(env, vel / 127);
  );

  // Note off
  event == 0x80 || (event == 0x90 && !vel) ? (
    ptr = poly.array_find(note);
    ptr >= 0 ? (
      env_r(envelope + note * 18);
    );
  );

  // All notes off
  event == 0xB0 && note == 123 ? (
    poly.array_clear();
  );

  midisend(offset, msg1, note, vel);
);

@sample

remove_notes.array_clear();
ptr = poly.array_first();
while(ptr >= 0) ( // for each note/voice
  envbuf = envelope + ptr[0] * 18;
  env_state = env_process(envbuf);

  freq = ptr[1];
  ph1 = ptr[2];
  ph2 = ptr[3];
  ph3 = ptr[4];
  ph4 = ptr[5];
  s1 = ptr[6];
  s2 = ptr[7];
  s3 = ptr[8];
  s4 = ptr[9];

  osc1.wave_sync(ph1 + s1 * fm11 + s2 * fm21 + s3 * fm31 + s4 * fm41);
  osc1.wave_setdt(freq);
  s1 = osc1.wave_spline3();
  ph1 += osc1.dt;
  ph1 > 1 ? ph1 -= 1;

  osc2.wave_sync(ph2 + s1 * fm12 + s2 * fm22 + s3 * fm32 + s4 * fm42);
  osc2.wave_setdt(freq);
  s2 = osc2.wave_spline3();
  ph2 += osc2.dt;
  ph2 > 1 ? ph2 -= 1;

  osc3.wave_sync(ph3 + s1 * fm13 + s2 * fm23 + s3 * fm33 + s4 * fm43);
  osc3.wave_setdt(freq);
  s3 = osc3.wave_spline3();
  ph3 += osc3.dt;
  ph3 > 1 ? ph3 -= 1;

  osc4.wave_sync(ph4 + s1 * fm14 + s2 * fm24 + s3 * fm34 + s4 * fm44);
  osc4.wave_setdt(freq);
  s4 = osc4.wave_spline3();
  ph4 += osc4.dt;
  ph4 > 1 ? ph4 -= 1;

  ptr[2] = ph1;
  ptr[3] = ph2;
  ptr[4] = ph3;
  ptr[5] = ph4;
  ptr[6] = s1;
  ptr[7] = s2;
  ptr[8] = s3;
  ptr[9] = s4;
  
  spl0 += s1 * 0.25 * envbuf[];
  spl1 += s1 * 0.25 * envbuf[];

  // mark note for deletion
  env_state == 0 ? (
    p = remove_notes.array_add();
    p[0] = ptr[0];
  );

  ptr = poly.array_next(ptr);
);

// remove notes that finished adsr
ptr = remove_notes.array_first();
while(ptr >= 0) (
  p = poly.array_find(ptr[0]);
  p >= 0 ? poly.array_remove(p);
  ptr = remove_notes.array_next(ptr);
);

